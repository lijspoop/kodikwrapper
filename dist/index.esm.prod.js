var K=Object.defineProperty;var k=(c,t)=>K(c,"name",{value:t,configurable:!0});var r=class extends Error{static{k(this,"VideoLinksError")}code;stack;data;cause;constructor({code:t,description:e,data:n,cause:i}){super(e),this.code=t,this.data=n,this.name=this.constructor.name,this.cause=i,Error.captureStackTrace(this,this.constructor)}get[Symbol.toStringTag](){return this.constructor.name}toJSON(){let t={};for(let e of Object.getOwnPropertyNames(this))t[e]=this[e];return t}};var E="https://kodikapi.com",b=["countries","genres","list","qualities","search","translations","years","qualitiesV2","translationsV2"],O={qualitiesV2:"qualities/v2",translationsV2:"translations/v2"},u=class extends Error{static{k(this,"ClientError")}name="ClientError"},P=class c{static{k(this,"Client")}KODIK_API_URL;constructor({token:t,kodikApiUrl:e}){this.KODIK_API_URL=e??E;for(let n of b){let i=O[n]??n;this[n]=l=>fetch(new URL(`${i}?${new URLSearchParams({token:t,...l}).toString()}`,this.KODIK_API_URL),{method:"POST"}).then(async s=>{if(s.headers.get("content-type")!=="application/json")throw new u(`invalid response (expected content-type application/json, but got ${s.headers.get("content-type")})`);let o=await s.json();if(typeof o!="object")throw new u(`expected json as an object, but got a ${typeof o}`);return o}).then(s=>{if("error"in s)throw new u(s.error);return s})}}static fromToken(t,e){return new c({...e,token:t})}};var I="kodik.info",S="/ftor",L=/^(?<protocol>http[s]?:|)\/\/(?<host>[a-z0-9]+\.[a-z]+)\/(?<type>[a-z]+)\/(?<id>\d+)\/(?<hash>[0-9a-z]+)\/(?<quality>\d+p)(?:.*)$/,y=class c{static{k(this,"VideoLinks")}static async parseLink({extended:t,link:e}){if(!e)throw new r({code:"parse-link-invalid",description:"link is not provided",data:{link:e}});let n=this.normalizeKodikLink(e);if(!L.test(e))throw new r({code:"parse-link-invalid",description:"link is not valid",data:{link:e}});let i=L.exec(n).groups,{host:l,hash:s,id:o,quality:a,type:f}=i,x={host:l,hash:s,id:o,quality:a,type:f};if(!t)return x;let d=await fetch(n).then(w=>w.text()),h=d.match(/var\s+urlParams\s*=\s*'(?<urlParams>[^']+)';/)?.groups?.urlParams,g=d.match(/var\s+translationId\s*=\s*(?<id>\d+);\s*var\s+translationTitle\s*=\s*"(?<title>[^"]+)";/is)?.groups,m=d.match(/parseSkipButtons?\("(?<data>[^"]+)"\s*,\s*"(?<type>[^"]+)"\)/is)?.groups,p=d.match(/src="(?<link>\/assets\/js\/app\.player_single\.[a-z0-9]+\.js)"/is)?.groups?.link;if(!h)throw new r({code:"parse-link-ex-invalid",description:"cannot get url params",data:{link:e,page:d}});if(!g)throw new r({code:"parse-link-ex-invalid",description:"cannot get translation",data:{link:e,page:d}});return{...x,ex:{urlParams:JSON.parse(h),translation:{id:+g.id,title:g.title},skipButtons:{...m},playerSingleUrl:p}}}static normalizeKodikLink(t){return t.startsWith("//")?`https:${t}`:t.startsWith("http")?t:new URL(t,`https://${I}`).toString()}static async getActualVideoInfoEndpoint(t){let e=await fetch(this.normalizeKodikLink(t)).then(i=>i.text());return atob(e.match(/type:"POST",url:atob\("(?<b64str>[^"]+)"\)/i)?.groups?.b64str??"")||"/kor"}static async getLinks({link:t,videoInfoEndpoint:e=S}){let{host:n,quality:i,...l}=await c.parseLink({link:t}),s=new URL(`${e}?${new URLSearchParams(l).toString()}`,`https://${n}`),o=await fetch(s);if(o.headers.get("content-type")!=="application/json")throw new r({code:"get-links-invalid-response",description:"videoInfoResponse is not json",data:{videoInfoResponse:o}});let a=await o.json();if(typeof a!="object"||a===null)throw new r({code:"get-links-invalid-response",description:"videoInfoJson is not object",data:{videoInfoResponse:o,videoInfoJson:a}});if(typeof a.links!="object")throw new r({code:"get-links-invalid-response",description:"videoInfoJson.links is not object",data:{videoInfoResponse:o,videoInfoJson:a}});let f=a.links,x=90;for(let[,d]of Object.entries(f))for(let h of d){let g=h.src.replace(/[a-zA-Z]/g,m=>{let p=m.charCodeAt(0);return String.fromCharCode((p<=x?90:122)>=(p=p+13)?p:p-26)});h.src=atob(g)}return f}static parseSkipButtons=t=>t.data.split(",").map(e=>{let[n,i]=e.split("-");return{from:n,to:i}})};export{P as Client,u as ClientError,E as KODIK_API_URL,I as KODIK_PLAYER_DOMAIN,S as KODIK_VIDEO_INFO_ENDPOINT,y as VideoLinks,r as VideoLinksError,L as kodikPlayerLinkRegexp};
